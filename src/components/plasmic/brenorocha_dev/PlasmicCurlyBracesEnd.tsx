/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eygJxeRspPrtKABTYb2Jd2
// Component: YHYSNfLior
import * as React from "react";
import {
  hasVariant,
  classNames,
  Flex,
  wrapWithClassName,
  Renderer,
  NodeRenderer,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_brenorocha_dev.css"; // plasmic-import: eygJxeRspPrtKABTYb2Jd2/projectcss
import "./PlasmicCurlyBracesEnd.css"; // plasmic-import: YHYSNfLior/css

export type PlasmicCurlyBracesEnd__VariantMembers = {};
export type PlasmicCurlyBracesEnd__VariantsArgs = {};
export const PlasmicCurlyBracesEnd__VariantProps = new Array<
  keyof PlasmicCurlyBracesEnd__VariantsArgs
>();

export type PlasmicCurlyBracesEnd__ArgsType = {};
export const PlasmicCurlyBracesEnd__ArgProps = new Array<
  keyof PlasmicCurlyBracesEnd__ArgsType
>();

export type PlasmicCurlyBracesEnd__OverridesType = {
  root?: Flex<"div">;
  textBg2?: Flex<"div">;
};

export interface DefaultCurlyBracesEndProps {
  className?: string;
}

function PlasmicCurlyBracesEnd__RenderFunc(props: {
  variants: PlasmicCurlyBracesEnd__VariantsArgs;
  args: PlasmicCurlyBracesEnd__ArgsType;
  overrides: PlasmicCurlyBracesEnd__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames({
        CurlyBracesEnd__root__cAkGZ: true,
        "plasmic-default__all": true,
        "plasmic-default__div": true
      })}
    >
      <div
        data-plasmic-name={"textBg2"}
        data-plasmic-override={overrides.textBg2}
        className={
          classNames({
            CurlyBracesEnd__textBg2__Bf6qg: true,
            "plasmic-default__all": true,
            "plasmic-default__div": true
          }) + " __wab_text"
        }
      >
        {"}"}
      </div>
    </div>
  ) as React.ReactElement | null;
}

class PlasmicCurlyBracesEnd__Renderer extends Renderer<
  PlasmicCurlyBracesEnd__VariantsArgs,
  PlasmicCurlyBracesEnd__ArgsType,
  PlasmicCurlyBracesEnd__OverridesType,
  "root"
> {
  constructor(
    variants: PlasmicCurlyBracesEnd__VariantsArgs,
    args: PlasmicCurlyBracesEnd__ArgsType
  ) {
    super(variants, args, PlasmicCurlyBracesEnd__RenderFunc, "root");
  }

  protected create(
    variants: PlasmicCurlyBracesEnd__VariantsArgs,
    args: PlasmicCurlyBracesEnd__ArgsType
  ) {
    return new PlasmicCurlyBracesEnd__Renderer(variants, args);
  }

  getInternalVariantProps(): (keyof PlasmicCurlyBracesEnd__VariantsArgs)[] {
    return PlasmicCurlyBracesEnd__VariantProps;
  }

  getInternalArgProps(): (keyof PlasmicCurlyBracesEnd__ArgsType)[] {
    return PlasmicCurlyBracesEnd__ArgProps;
  }

  forNode(
    name: "textBg2"
  ): NodeRenderer<
    PlasmicCurlyBracesEnd__VariantsArgs,
    PlasmicCurlyBracesEnd__ArgsType,
    {
      textBg2?: Flex<"div">;
    }
  >;

  forNode(
    name: "root"
  ): NodeRenderer<
    PlasmicCurlyBracesEnd__VariantsArgs,
    PlasmicCurlyBracesEnd__ArgsType,
    {
      root?: Flex<"div">;
      textBg2?: Flex<"div">;
    }
  >;

  forNode(name: keyof PlasmicCurlyBracesEnd__OverridesType) {
    return super.forNode(name);
  }
}

type PlasmicCurlyBracesEndRootProps = PlasmicCurlyBracesEnd__VariantsArgs &
  PlasmicCurlyBracesEnd__ArgsType & {
    variants?: PlasmicCurlyBracesEnd__VariantsArgs;
    args?: PlasmicCurlyBracesEnd__ArgsType;
    overrides?: {
      root?: Flex<"div">;
      textBg2?: Flex<"div">;
    };

    root?: Flex<"div">;
    textBg2?: Flex<"div">;
  } & Omit<
    Partial<React.ComponentProps<"div">>,
    | keyof PlasmicCurlyBracesEnd__VariantsArgs
    | keyof PlasmicCurlyBracesEnd__ArgsType
    | "variants"
    | "args"
    | "root"
    | "textBg2"
  >;

export const PlasmicCurlyBracesEnd = function PlasmicCurlyBracesEndRoot<
  T extends PlasmicCurlyBracesEndRootProps
>(props: T & StrictProps<T, PlasmicCurlyBracesEndRootProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "root",
    descendantNames: ["root", "textBg2"],
    internalArgPropNames: PlasmicCurlyBracesEnd__ArgProps,
    internalVariantPropNames: PlasmicCurlyBracesEnd__VariantProps
  });

  return PlasmicCurlyBracesEnd__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "root"
  });
};

type PlasmicCurlyBracesEndTextBg2Props = PlasmicCurlyBracesEnd__VariantsArgs &
  PlasmicCurlyBracesEnd__ArgsType & {
    variants?: PlasmicCurlyBracesEnd__VariantsArgs;
    args?: PlasmicCurlyBracesEnd__ArgsType;
    overrides?: {
      textBg2?: Flex<"div">;
    };

    textBg2?: Flex<"div">;
  } & Omit<
    Partial<React.ComponentProps<"div">>,
    | keyof PlasmicCurlyBracesEnd__VariantsArgs
    | keyof PlasmicCurlyBracesEnd__ArgsType
    | "variants"
    | "args"
    | "textBg2"
  >;

PlasmicCurlyBracesEnd.textBg2 = function PlasmicCurlyBracesEndTextBg2<
  T extends PlasmicCurlyBracesEndTextBg2Props
>(props: T & StrictProps<T, PlasmicCurlyBracesEndTextBg2Props>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "textBg2",
    descendantNames: ["textBg2"],
    internalArgPropNames: PlasmicCurlyBracesEnd__ArgProps,
    internalVariantPropNames: PlasmicCurlyBracesEnd__VariantProps
  });

  return PlasmicCurlyBracesEnd__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "textBg2"
  });
};

PlasmicCurlyBracesEnd.createRenderer = () =>
  new PlasmicCurlyBracesEnd__Renderer({}, {});

export default PlasmicCurlyBracesEnd;
/* prettier-ignore-end */
