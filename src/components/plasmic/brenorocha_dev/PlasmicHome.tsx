/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eygJxeRspPrtKABTYb2Jd2
// Component: aY6SZMMm-p
import * as React from "react";
import {
  hasVariant,
  classNames,
  Flex,
  wrapWithClassName,
  Renderer,
  NodeRenderer,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import CurlyBraces from "../../CurlyBraces"; // plasmic-import: kF34L4sqRO/component
import HiddenHeader from "../../HiddenHeader"; // plasmic-import: k0o1cf5e_p/component
import HeroHeader from "../../HeroHeader"; // plasmic-import: 6wel9emd8p/component
import FirstSection from "../../FirstSection"; // plasmic-import: qdormx9dnp/component
import SecondSection from "../../SecondSection"; // plasmic-import: Myj_maqtK6S/component
import SpaceWrapper from "../../SpaceWrapper"; // plasmic-import: -G_lGD-Bdf/component
import FooterWrapper from "../../FooterWrapper"; // plasmic-import: iTUWmT1Up8N/component
import WelcomeText from "../../WelcomeText"; // plasmic-import: WoUevCP7iO/component
import BuyMeCoffeeText from "../../BuyMeCoffeeText"; // plasmic-import: 8fOMVhrXUa/component

import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_brenorocha_dev.css"; // plasmic-import: eygJxeRspPrtKABTYb2Jd2/projectcss
import "./PlasmicHome.css"; // plasmic-import: aY6SZMMm-p/css
import Vector13Icon from "./PlasmicIcon__Vector13"; // plasmic-import: r6fY-Nt5rT/icon
import Vector14Icon from "./PlasmicIcon__Vector14"; // plasmic-import: wje5UrvlNe/icon
import Vector15Icon from "./PlasmicIcon__Vector15"; // plasmic-import: eQC6hcq69U/icon

export type PlasmicHome__VariantMembers = {};
export type PlasmicHome__VariantsArgs = {};
export const PlasmicHome__VariantProps = new Array<
  keyof PlasmicHome__VariantsArgs
>();

export type PlasmicHome__ArgsType = {};
export const PlasmicHome__ArgProps = new Array<keyof PlasmicHome__ArgsType>();

export type PlasmicHome__OverridesType = {
  root?: Flex<"main">;
  figmaPaste?: Flex<"div">;
  curlyBracesInit?: Flex<typeof CurlyBraces>;
  hiddenHeader?: Flex<typeof HiddenHeader>;
  heroHeader?: Flex<typeof HeroHeader>;
  firstSection?: Flex<typeof FirstSection>;
  secondSection?: Flex<typeof SecondSection>;
  spaceWrapper?: Flex<typeof SpaceWrapper>;
  footerWrapper?: Flex<typeof FooterWrapper>;
  welcomeText?: Flex<typeof WelcomeText>;
  buyMeCoffeeText?: Flex<typeof BuyMeCoffeeText>;
};

export interface DefaultHomeProps {
  className?: string;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <main
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames({
        Home__root__QJolw: true,
        "plasmic-default__all": true,
        "plasmic-default__main": true
      })}
    >
      <div
        data-plasmic-name={"figmaPaste"}
        data-plasmic-override={overrides.figmaPaste}
        className={classNames({
          Home__figmaPaste__TIXhE: true,
          "plasmic-default__all": true,
          "plasmic-default__div": true
        })}
      >
        <CurlyBraces
          data-plasmic-name={"curlyBracesInit"}
          data-plasmic-override={overrides.curlyBracesInit}
          className={classNames({
            Home__curlyBracesInit__Ymy9z: true,
            __wab_instance: true
          })}
          {...({} as any)}
        ></CurlyBraces>

        <div
          className={classNames({
            Home__box__9_NQw: true,
            "plasmic-default__all": true,
            "plasmic-default__div": true
          })}
        >
          <Vector13Icon
            className={classNames({
              "Home__svg__sUs-d": true,
              "plasmic-default__all": true,
              "plasmic-default__svg": true
            })}
            role={"img"}
            {...({} as any)}
          ></Vector13Icon>
        </div>

        <div
          className={classNames({
            Home__box__wShSu: true,
            "plasmic-default__all": true,
            "plasmic-default__div": true
          })}
        >
          <Vector14Icon
            className={classNames({
              Home__svg__4BUNg: true,
              "plasmic-default__all": true,
              "plasmic-default__svg": true
            })}
            role={"img"}
            {...({} as any)}
          ></Vector14Icon>
        </div>

        <div
          className={classNames({
            Home__box__ffbVN: true,
            "plasmic-default__all": true,
            "plasmic-default__div": true
          })}
        >
          <Vector15Icon
            className={classNames({
              Home__svg__hVkRz: true,
              "plasmic-default__all": true,
              "plasmic-default__svg": true
            })}
            role={"img"}
            {...({} as any)}
          ></Vector15Icon>
        </div>
      </div>

      <div
        className={classNames({
          Home__box__kq7kw: true,
          "plasmic-default__all": true,
          "plasmic-default__div": true
        })}
      >
        <HiddenHeader
          data-plasmic-name={"hiddenHeader"}
          data-plasmic-override={overrides.hiddenHeader}
          className={classNames({
            Home__hiddenHeader__Rg7x2: true,
            __wab_instance: true
          })}
          {...({} as any)}
        ></HiddenHeader>

        <HeroHeader
          data-plasmic-name={"heroHeader"}
          data-plasmic-override={overrides.heroHeader}
          className={classNames({
            Home__heroHeader__Ujo7A: true,
            __wab_instance: true
          })}
          {...({} as any)}
        ></HeroHeader>

        <FirstSection
          data-plasmic-name={"firstSection"}
          data-plasmic-override={overrides.firstSection}
          className={classNames({
            Home__firstSection__y0zCa: true,
            __wab_instance: true
          })}
          {...({} as any)}
        ></FirstSection>

        <SecondSection
          data-plasmic-name={"secondSection"}
          data-plasmic-override={overrides.secondSection}
          className={classNames({
            Home__secondSection__R1Tci: true,
            __wab_instance: true
          })}
          {...({} as any)}
        ></SecondSection>

        <SpaceWrapper
          data-plasmic-name={"spaceWrapper"}
          data-plasmic-override={overrides.spaceWrapper}
          className={classNames({
            "Home__spaceWrapper__fMB-R": true,
            __wab_instance: true
          })}
          {...({} as any)}
        ></SpaceWrapper>
      </div>

      <div
        className={classNames({
          Home__box__bG_9o: true,
          "plasmic-default__all": true,
          "plasmic-default__div": true
        })}
      >
        <FooterWrapper
          data-plasmic-name={"footerWrapper"}
          data-plasmic-override={overrides.footerWrapper}
          className={classNames({
            Home__footerWrapper__b4uG1: true,
            __wab_instance: true
          })}
          {...({} as any)}
        ></FooterWrapper>

        <WelcomeText
          data-plasmic-name={"welcomeText"}
          data-plasmic-override={overrides.welcomeText}
          className={classNames({
            Home__welcomeText__bLOlv: true,
            __wab_instance: true
          })}
          {...({} as any)}
        ></WelcomeText>

        <BuyMeCoffeeText
          data-plasmic-name={"buyMeCoffeeText"}
          data-plasmic-override={overrides.buyMeCoffeeText}
          className={classNames({
            Home__buyMeCoffeeText__NaIty: true,
            __wab_instance: true
          })}
          {...({} as any)}
        ></BuyMeCoffeeText>
      </div>
    </main>
  ) as React.ReactElement | null;
}

class PlasmicHome__Renderer extends Renderer<
  PlasmicHome__VariantsArgs,
  PlasmicHome__ArgsType,
  PlasmicHome__OverridesType,
  "root"
> {
  constructor(
    variants: PlasmicHome__VariantsArgs,
    args: PlasmicHome__ArgsType
  ) {
    super(variants, args, PlasmicHome__RenderFunc, "root");
  }

  protected create(
    variants: PlasmicHome__VariantsArgs,
    args: PlasmicHome__ArgsType
  ) {
    return new PlasmicHome__Renderer(variants, args);
  }

  getInternalVariantProps(): (keyof PlasmicHome__VariantsArgs)[] {
    return PlasmicHome__VariantProps;
  }

  getInternalArgProps(): (keyof PlasmicHome__ArgsType)[] {
    return PlasmicHome__ArgProps;
  }

  forNode(
    name: "buyMeCoffeeText"
  ): NodeRenderer<
    PlasmicHome__VariantsArgs,
    PlasmicHome__ArgsType,
    {
      buyMeCoffeeText?: Flex<typeof BuyMeCoffeeText>;
    }
  >;

  forNode(
    name: "welcomeText"
  ): NodeRenderer<
    PlasmicHome__VariantsArgs,
    PlasmicHome__ArgsType,
    {
      welcomeText?: Flex<typeof WelcomeText>;
    }
  >;

  forNode(
    name: "footerWrapper"
  ): NodeRenderer<
    PlasmicHome__VariantsArgs,
    PlasmicHome__ArgsType,
    {
      footerWrapper?: Flex<typeof FooterWrapper>;
    }
  >;

  forNode(
    name: "spaceWrapper"
  ): NodeRenderer<
    PlasmicHome__VariantsArgs,
    PlasmicHome__ArgsType,
    {
      spaceWrapper?: Flex<typeof SpaceWrapper>;
    }
  >;

  forNode(
    name: "secondSection"
  ): NodeRenderer<
    PlasmicHome__VariantsArgs,
    PlasmicHome__ArgsType,
    {
      secondSection?: Flex<typeof SecondSection>;
    }
  >;

  forNode(
    name: "firstSection"
  ): NodeRenderer<
    PlasmicHome__VariantsArgs,
    PlasmicHome__ArgsType,
    {
      firstSection?: Flex<typeof FirstSection>;
    }
  >;

  forNode(
    name: "heroHeader"
  ): NodeRenderer<
    PlasmicHome__VariantsArgs,
    PlasmicHome__ArgsType,
    {
      heroHeader?: Flex<typeof HeroHeader>;
    }
  >;

  forNode(
    name: "hiddenHeader"
  ): NodeRenderer<
    PlasmicHome__VariantsArgs,
    PlasmicHome__ArgsType,
    {
      hiddenHeader?: Flex<typeof HiddenHeader>;
    }
  >;

  forNode(
    name: "curlyBracesInit"
  ): NodeRenderer<
    PlasmicHome__VariantsArgs,
    PlasmicHome__ArgsType,
    {
      curlyBracesInit?: Flex<typeof CurlyBraces>;
    }
  >;

  forNode(
    name: "figmaPaste"
  ): NodeRenderer<
    PlasmicHome__VariantsArgs,
    PlasmicHome__ArgsType,
    {
      figmaPaste?: Flex<"div">;
      curlyBracesInit?: Flex<typeof CurlyBraces>;
    }
  >;

  forNode(
    name: "root"
  ): NodeRenderer<
    PlasmicHome__VariantsArgs,
    PlasmicHome__ArgsType,
    {
      root?: Flex<"main">;
      figmaPaste?: Flex<"div">;
      curlyBracesInit?: Flex<typeof CurlyBraces>;
      hiddenHeader?: Flex<typeof HiddenHeader>;
      heroHeader?: Flex<typeof HeroHeader>;
      firstSection?: Flex<typeof FirstSection>;
      secondSection?: Flex<typeof SecondSection>;
      spaceWrapper?: Flex<typeof SpaceWrapper>;
      footerWrapper?: Flex<typeof FooterWrapper>;
      welcomeText?: Flex<typeof WelcomeText>;
      buyMeCoffeeText?: Flex<typeof BuyMeCoffeeText>;
    }
  >;

  forNode(name: keyof PlasmicHome__OverridesType) {
    return super.forNode(name);
  }
}

type PlasmicHomeRootProps = PlasmicHome__VariantsArgs &
  PlasmicHome__ArgsType & {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: {
      root?: Flex<"main">;
      figmaPaste?: Flex<"div">;
      curlyBracesInit?: Flex<typeof CurlyBraces>;
      hiddenHeader?: Flex<typeof HiddenHeader>;
      heroHeader?: Flex<typeof HeroHeader>;
      firstSection?: Flex<typeof FirstSection>;
      secondSection?: Flex<typeof SecondSection>;
      spaceWrapper?: Flex<typeof SpaceWrapper>;
      footerWrapper?: Flex<typeof FooterWrapper>;
      welcomeText?: Flex<typeof WelcomeText>;
      buyMeCoffeeText?: Flex<typeof BuyMeCoffeeText>;
    };

    root?: Flex<"main">;
    figmaPaste?: Flex<"div">;
    curlyBracesInit?: Flex<typeof CurlyBraces>;
    hiddenHeader?: Flex<typeof HiddenHeader>;
    heroHeader?: Flex<typeof HeroHeader>;
    firstSection?: Flex<typeof FirstSection>;
    secondSection?: Flex<typeof SecondSection>;
    spaceWrapper?: Flex<typeof SpaceWrapper>;
    footerWrapper?: Flex<typeof FooterWrapper>;
    welcomeText?: Flex<typeof WelcomeText>;
    buyMeCoffeeText?: Flex<typeof BuyMeCoffeeText>;
  } & Omit<
    Partial<React.ComponentProps<"main">>,
    | keyof PlasmicHome__VariantsArgs
    | keyof PlasmicHome__ArgsType
    | "variants"
    | "args"
    | "root"
    | "figmaPaste"
    | "curlyBracesInit"
    | "hiddenHeader"
    | "heroHeader"
    | "firstSection"
    | "secondSection"
    | "spaceWrapper"
    | "footerWrapper"
    | "welcomeText"
    | "buyMeCoffeeText"
  >;

export const PlasmicHome = function PlasmicHomeRoot<
  T extends PlasmicHomeRootProps
>(props: T & StrictProps<T, PlasmicHomeRootProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "root",
    descendantNames: [
      "root",
      "figmaPaste",
      "curlyBracesInit",
      "hiddenHeader",
      "heroHeader",
      "firstSection",
      "secondSection",
      "spaceWrapper",
      "footerWrapper",
      "welcomeText",
      "buyMeCoffeeText"
    ],

    internalArgPropNames: PlasmicHome__ArgProps,
    internalVariantPropNames: PlasmicHome__VariantProps
  });

  return PlasmicHome__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "root"
  });
};

type PlasmicHomeFigmaPasteProps = PlasmicHome__VariantsArgs &
  PlasmicHome__ArgsType & {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: {
      figmaPaste?: Flex<"div">;
      curlyBracesInit?: Flex<typeof CurlyBraces>;
    };

    figmaPaste?: Flex<"div">;
    curlyBracesInit?: Flex<typeof CurlyBraces>;
  } & Omit<
    Partial<React.ComponentProps<"div">>,
    | keyof PlasmicHome__VariantsArgs
    | keyof PlasmicHome__ArgsType
    | "variants"
    | "args"
    | "figmaPaste"
    | "curlyBracesInit"
  >;

PlasmicHome.figmaPaste = function PlasmicHomeFigmaPaste<
  T extends PlasmicHomeFigmaPasteProps
>(props: T & StrictProps<T, PlasmicHomeFigmaPasteProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "figmaPaste",
    descendantNames: ["figmaPaste", "curlyBracesInit"],
    internalArgPropNames: PlasmicHome__ArgProps,
    internalVariantPropNames: PlasmicHome__VariantProps
  });

  return PlasmicHome__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "figmaPaste"
  });
};

type PlasmicHomeCurlyBracesInitProps = PlasmicHome__VariantsArgs &
  PlasmicHome__ArgsType & {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: {
      curlyBracesInit?: Flex<typeof CurlyBraces>;
    };

    curlyBracesInit?: Flex<typeof CurlyBraces>;
  } & Omit<
    Partial<React.ComponentProps<typeof CurlyBraces>>,
    | keyof PlasmicHome__VariantsArgs
    | keyof PlasmicHome__ArgsType
    | "variants"
    | "args"
    | "curlyBracesInit"
  >;

PlasmicHome.curlyBracesInit = function PlasmicHomeCurlyBracesInit<
  T extends PlasmicHomeCurlyBracesInitProps
>(props: T & StrictProps<T, PlasmicHomeCurlyBracesInitProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "curlyBracesInit",
    descendantNames: ["curlyBracesInit"],
    internalArgPropNames: PlasmicHome__ArgProps,
    internalVariantPropNames: PlasmicHome__VariantProps
  });

  return PlasmicHome__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "curlyBracesInit"
  });
};

type PlasmicHomeHiddenHeaderProps = PlasmicHome__VariantsArgs &
  PlasmicHome__ArgsType & {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: {
      hiddenHeader?: Flex<typeof HiddenHeader>;
    };

    hiddenHeader?: Flex<typeof HiddenHeader>;
  } & Omit<
    Partial<React.ComponentProps<typeof HiddenHeader>>,
    | keyof PlasmicHome__VariantsArgs
    | keyof PlasmicHome__ArgsType
    | "variants"
    | "args"
    | "hiddenHeader"
  >;

PlasmicHome.hiddenHeader = function PlasmicHomeHiddenHeader<
  T extends PlasmicHomeHiddenHeaderProps
>(props: T & StrictProps<T, PlasmicHomeHiddenHeaderProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "hiddenHeader",
    descendantNames: ["hiddenHeader"],
    internalArgPropNames: PlasmicHome__ArgProps,
    internalVariantPropNames: PlasmicHome__VariantProps
  });

  return PlasmicHome__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "hiddenHeader"
  });
};

type PlasmicHomeHeroHeaderProps = PlasmicHome__VariantsArgs &
  PlasmicHome__ArgsType & {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: {
      heroHeader?: Flex<typeof HeroHeader>;
    };

    heroHeader?: Flex<typeof HeroHeader>;
  } & Omit<
    Partial<React.ComponentProps<typeof HeroHeader>>,
    | keyof PlasmicHome__VariantsArgs
    | keyof PlasmicHome__ArgsType
    | "variants"
    | "args"
    | "heroHeader"
  >;

PlasmicHome.heroHeader = function PlasmicHomeHeroHeader<
  T extends PlasmicHomeHeroHeaderProps
>(props: T & StrictProps<T, PlasmicHomeHeroHeaderProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "heroHeader",
    descendantNames: ["heroHeader"],
    internalArgPropNames: PlasmicHome__ArgProps,
    internalVariantPropNames: PlasmicHome__VariantProps
  });

  return PlasmicHome__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "heroHeader"
  });
};

type PlasmicHomeFirstSectionProps = PlasmicHome__VariantsArgs &
  PlasmicHome__ArgsType & {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: {
      firstSection?: Flex<typeof FirstSection>;
    };

    firstSection?: Flex<typeof FirstSection>;
  } & Omit<
    Partial<React.ComponentProps<typeof FirstSection>>,
    | keyof PlasmicHome__VariantsArgs
    | keyof PlasmicHome__ArgsType
    | "variants"
    | "args"
    | "firstSection"
  >;

PlasmicHome.firstSection = function PlasmicHomeFirstSection<
  T extends PlasmicHomeFirstSectionProps
>(props: T & StrictProps<T, PlasmicHomeFirstSectionProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "firstSection",
    descendantNames: ["firstSection"],
    internalArgPropNames: PlasmicHome__ArgProps,
    internalVariantPropNames: PlasmicHome__VariantProps
  });

  return PlasmicHome__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "firstSection"
  });
};

type PlasmicHomeSecondSectionProps = PlasmicHome__VariantsArgs &
  PlasmicHome__ArgsType & {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: {
      secondSection?: Flex<typeof SecondSection>;
    };

    secondSection?: Flex<typeof SecondSection>;
  } & Omit<
    Partial<React.ComponentProps<typeof SecondSection>>,
    | keyof PlasmicHome__VariantsArgs
    | keyof PlasmicHome__ArgsType
    | "variants"
    | "args"
    | "secondSection"
  >;

PlasmicHome.secondSection = function PlasmicHomeSecondSection<
  T extends PlasmicHomeSecondSectionProps
>(props: T & StrictProps<T, PlasmicHomeSecondSectionProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "secondSection",
    descendantNames: ["secondSection"],
    internalArgPropNames: PlasmicHome__ArgProps,
    internalVariantPropNames: PlasmicHome__VariantProps
  });

  return PlasmicHome__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "secondSection"
  });
};

type PlasmicHomeSpaceWrapperProps = PlasmicHome__VariantsArgs &
  PlasmicHome__ArgsType & {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: {
      spaceWrapper?: Flex<typeof SpaceWrapper>;
    };

    spaceWrapper?: Flex<typeof SpaceWrapper>;
  } & Omit<
    Partial<React.ComponentProps<typeof SpaceWrapper>>,
    | keyof PlasmicHome__VariantsArgs
    | keyof PlasmicHome__ArgsType
    | "variants"
    | "args"
    | "spaceWrapper"
  >;

PlasmicHome.spaceWrapper = function PlasmicHomeSpaceWrapper<
  T extends PlasmicHomeSpaceWrapperProps
>(props: T & StrictProps<T, PlasmicHomeSpaceWrapperProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "spaceWrapper",
    descendantNames: ["spaceWrapper"],
    internalArgPropNames: PlasmicHome__ArgProps,
    internalVariantPropNames: PlasmicHome__VariantProps
  });

  return PlasmicHome__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "spaceWrapper"
  });
};

type PlasmicHomeFooterWrapperProps = PlasmicHome__VariantsArgs &
  PlasmicHome__ArgsType & {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: {
      footerWrapper?: Flex<typeof FooterWrapper>;
    };

    footerWrapper?: Flex<typeof FooterWrapper>;
  } & Omit<
    Partial<React.ComponentProps<typeof FooterWrapper>>,
    | keyof PlasmicHome__VariantsArgs
    | keyof PlasmicHome__ArgsType
    | "variants"
    | "args"
    | "footerWrapper"
  >;

PlasmicHome.footerWrapper = function PlasmicHomeFooterWrapper<
  T extends PlasmicHomeFooterWrapperProps
>(props: T & StrictProps<T, PlasmicHomeFooterWrapperProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "footerWrapper",
    descendantNames: ["footerWrapper"],
    internalArgPropNames: PlasmicHome__ArgProps,
    internalVariantPropNames: PlasmicHome__VariantProps
  });

  return PlasmicHome__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "footerWrapper"
  });
};

type PlasmicHomeWelcomeTextProps = PlasmicHome__VariantsArgs &
  PlasmicHome__ArgsType & {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: {
      welcomeText?: Flex<typeof WelcomeText>;
    };

    welcomeText?: Flex<typeof WelcomeText>;
  } & Omit<
    Partial<React.ComponentProps<typeof WelcomeText>>,
    | keyof PlasmicHome__VariantsArgs
    | keyof PlasmicHome__ArgsType
    | "variants"
    | "args"
    | "welcomeText"
  >;

PlasmicHome.welcomeText = function PlasmicHomeWelcomeText<
  T extends PlasmicHomeWelcomeTextProps
>(props: T & StrictProps<T, PlasmicHomeWelcomeTextProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "welcomeText",
    descendantNames: ["welcomeText"],
    internalArgPropNames: PlasmicHome__ArgProps,
    internalVariantPropNames: PlasmicHome__VariantProps
  });

  return PlasmicHome__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "welcomeText"
  });
};

type PlasmicHomeBuyMeCoffeeTextProps = PlasmicHome__VariantsArgs &
  PlasmicHome__ArgsType & {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: {
      buyMeCoffeeText?: Flex<typeof BuyMeCoffeeText>;
    };

    buyMeCoffeeText?: Flex<typeof BuyMeCoffeeText>;
  } & Omit<
    Partial<React.ComponentProps<typeof BuyMeCoffeeText>>,
    | keyof PlasmicHome__VariantsArgs
    | keyof PlasmicHome__ArgsType
    | "variants"
    | "args"
    | "buyMeCoffeeText"
  >;

PlasmicHome.buyMeCoffeeText = function PlasmicHomeBuyMeCoffeeText<
  T extends PlasmicHomeBuyMeCoffeeTextProps
>(props: T & StrictProps<T, PlasmicHomeBuyMeCoffeeTextProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "buyMeCoffeeText",
    descendantNames: ["buyMeCoffeeText"],
    internalArgPropNames: PlasmicHome__ArgProps,
    internalVariantPropNames: PlasmicHome__VariantProps
  });

  return PlasmicHome__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "buyMeCoffeeText"
  });
};

PlasmicHome.createRenderer = () => new PlasmicHome__Renderer({}, {});

export default PlasmicHome;
/* prettier-ignore-end */
